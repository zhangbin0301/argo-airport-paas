#This is an example webapp.io configuration for Docker!
FROM vm/ubuntu:18.04

# To note: Layerfiles create entire VMs, *not* containers!
# SECRET ENV ARGO_AUTH
# SECRET ENV ARGO_DOMAIN
# SECRET ENV NEZHA_KEY
# SECRET ENV NEZHA_PORT
# SECRET ENV NEZHA_SERVER
# SECRET ENV PORT
# SECRET ENV TARGET_HOSTNAME_URL
# SECRET ENV API_HOST
# SECRET ENV API_KEY
# SECRET ENV CERT_DOMAIN
# SECRET ENV NODE_ID
# SECRET ENV MAX_MEMORY_RESTART
# RUN echo "secret is: $MAX_MEMORY_RESTART"
SECRET ENV ENV_FILE

# install the latest version of Docker, as in the official Docker installation tutorial.
RUN apt-get update && \
    apt-get install ca-certificates curl gnupg lsb-release && \
    sudo mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |\
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install docker-ce docker-ce-cli containerd.io
# install & start k3s
RUN curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.2+k3s1 sh -s - --docker
# initialize the swarm cluster
# RUN docker swarm init
# copy files from the repository into this staging server
COPY . .
# output the environment variables to a file
RUN echo "$ENV_FILE" | base64 -d > ~/.env
# show the environment variables
# RUN cat ~/.env
# copy the docker-compose file into the staging server
RUN cp docker-compose.example.yml docker-compose.yml
RUN cp docker-compose.example-swarm.yml docker-compose.swarm.yml
RUN cp deploy.example.yaml deploy.yaml
# test the docker-compose file locally to make sure it works
# RUN REPEATABLE docker compose build --parallel
# RUN docker compose up web web-build -d
# systemctl restart k3s is required here because tokens expire when things are hibernated
RUN systemctl restart k3s
RUN kubectl create configmap config-env --from-env-file=.env

RUN k3s kubectl apply -f deploy.yaml
# RUN docker ps -a
# deploy the stack to the swarm cluster (this will run the containers at background)
# RUN BACKGROUND docker stack deploy -c docker-compose.swarm.yml argo-paas-swarm
# RUN docker ps -a
# RUN docker build -f Dockerfile.build -t image-build .
# RUN docker build -t image .
# RUN docker build -f Dockerfile.debian -t image-debian .
# RUN docker run -d -p 80:3000 --name container image
# RUN docker run -d -p 81:3000 --name container-build image-build
# RUN docker run -d -p 82:3000 --name container-debian image-debian
# RUN docker run -d -p 83:3000 --name container-v2board   \
#     -e ARGO_AUTH=$ARGO_AUTH \
#     -e ARGO_DOMAIN=$ARGO_DOMAIN  \
#     -e NEZHA_KEY=$NEZHA_KEY     \
#     -e NEZHA_PORT=$NEZHA_PORT      \
#     -e NEZHA_SERVER=$NEZHA_SERVER       \
#     -e PORT=$PORT          \
#     -e TARGET_HOSTNAME_URL=$TARGET_HOSTNAME_URL   \
#     -e API_HOST=$API_HOST         \
#     -e API_KEY=$API_KEY       \
#     -e CERT_DOMAIN=$CERT_DOMAIN  \
#     -e NODE_ID=$NODE_ID         \
#     -e MAX_MEMORY_RESTART=$MAX_MEMORY_RESTART    \
#     image-build

# RUN docker ps -a

# EXPOSE WEBSITE http://localhost:80 /image

# EXPOSE WEBSITE http://localhost:81 /images-build

# EXPOSE WEBSITE http://localhost:82 /image-debian

EXPOSE WEBSITE localhost:8580
# run the server
# RUN BACKGROUND echo "hello world" && \
#     while true; do curl -s http://localhost:80/status; sleep 15; done && \
#     tail -f /dev/null
# FROM /Layerfile
# # RUN /bin/bash -c "echo 'hello world'"
# RUN docker swarm init
# RUN REPEATABLE docker compose build --parallel
# RUN docker compose up web web-build -d
# # deploy the stack to the swarm cluster (this will run the containers at background)
# RUN BACKGROUND docker stack deploy -c docker-compose.swarm.yml argo-paas-swarm
# RUN docker ps -a